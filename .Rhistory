fake2$tnfa=as.numeric(as.character(fake1$tnfa))
fake2$IL4=as.numeric(as.character(fake1$IL4))
fake2$IL5=as.numeric(as.character(fake1$IL5))
fake2$IL10=as.numeric(as.character(fake1$IL10))
fake2$IL13=as.numeric(as.character(fake1$IL13))
fake2$IL17=as.numeric(as.character(fake1$IL17))
fake2$IL21=as.numeric(as.character(fake1$IL21))
fake2$IL22=as.numeric(as.character(fake1$IL22))
#Print "fake2" datatables
library(knitr)
kable(fake2)
#Write "fake2" csv
setwd("/Users/eviox/Documents/Emory_IMP/Rotations/Day_Lab/Luminex/FakeData/")
write.csv(fake2,"fake2.csv")
View(fake2)
View(fake2)
#Create "fake1" datatable
library(knitr)
library(data.table)
donor<-c(rep("A_SMpos", 6), rep("B_SMneg",6), rep("C_SMneg",6), rep("D_SMneg",6), rep("E_SMpos",6), rep("F_SMpos",6), rep("G_SMneg",6), rep("H_SMneg",6), rep("I_SMneg",6), rep("J_SMpos",6), rep("K_SMpos",6), rep("L_SMpos",6), rep("M_SMpos", 6))
stim<-rep(c("un","w","p","s","sw","sb"),3)
ifng<-rnorm(70, 2)
tnfa<-rnorm(70,10)
IL4<-rnorm(70,5)
IL5<-rnorm(70,7)
IL10<-rnorm(70,13)
IL13<-rnorm(70,19)
IL17<-rnorm(70,17)
IL21<-rnorm(70,11)
IL22<-rnorm(70,3)
fake1<-as.data.table(cbind(donor,stim,ifng,tnfa,IL4, IL5, IL10, IL13, IL17, IL21, IL22))
fake1$ifng=as.numeric(as.character(fake1$ifng))
fake1$tnfa=as.numeric(as.character(fake1$tnfa))
fake1$IL4=as.numeric(as.character(fake1$IL4))
fake1$IL5=as.numeric(as.character(fake1$IL5))
fake1$IL10=as.numeric(as.character(fake1$IL10))
fake1$IL13=as.numeric(as.character(fake1$IL13))
fake1$IL17=as.numeric(as.character(fake1$IL17))
fake1$IL21=as.numeric(as.character(fake1$IL21))
fake1$IL22=as.numeric(as.character(fake1$IL22))
#Print "fake1" and "fake2" datatables
library(knitr)
kable(fake1)
#Write "fake1" csv
setwd("/Users/eviox/Documents/Emory_IMP/Rotations/Day_Lab/Luminex/FakeData/")
write.csv(fake1,"fake1.csv")
#Create "fake2" datatable
library(knitr)
library(data.table)
donor<-c(rep("N_SMpos",6), rep("O_SMpos",6), rep("P_SMpos",6), rep("Q_SMneg",6), rep("R_SMpos",6), rep("S_SMneg",6), rep("T_SMneg",6), rep("U_SMneg",6), rep("V_SMneg",6), rep("W_SMpos",6), rep("X_SMpos",6), rep("Y_SMneg", 6), rep("Z_SMpos", 6))
stim<-rep(c("un","w","p","s","sw","sb"),3)
ifng<-rnorm(70, 2)
tnfa<-rnorm(70,10)
IL4<-rnorm(70,5)
IL5<-rnorm(70,7)
IL10<-rnorm(70,13)
IL13<-rnorm(70,19)
IL17<-rnorm(70,17)
IL21<-rnorm(70,11)
IL22<-rnorm(70,3)
fake2<-as.data.table(cbind(donor,stim,ifng,tnfa,IL4, IL5, IL10, IL13, IL17, IL21, IL22))
fake2$ifng=as.numeric(as.character(fake1$ifng))
fake2$tnfa=as.numeric(as.character(fake1$tnfa))
fake2$IL4=as.numeric(as.character(fake1$IL4))
fake2$IL5=as.numeric(as.character(fake1$IL5))
fake2$IL10=as.numeric(as.character(fake1$IL10))
fake2$IL13=as.numeric(as.character(fake1$IL13))
fake2$IL17=as.numeric(as.character(fake1$IL17))
fake2$IL21=as.numeric(as.character(fake1$IL21))
fake2$IL22=as.numeric(as.character(fake1$IL22))
#Print "fake2" datatables
library(knitr)
kable(fake2)
#Write "fake2" csv
setwd("/Users/eviox/Documents/Emory_IMP/Rotations/Day_Lab/Luminex/FakeData/")
write.csv(fake2,"fake2.csv")
library(data.table)
file_names <- dir("/Users/eviox/Documents/Emory_IMP/Rotations/Day_Lab/Luminex/FakeData/") #where you have your files
setwd("/Users/eviox/Documents/Emory_IMP/Rotations/Day_Lab/Luminex/FakeData/")
fakecombined <- do.call(rbind,lapply(file_names,read.csv))
fakecombined$X <- NULL
library(knitr)
#Redefine donor (since previously defined for generating fake data)
donor<-fakecombined$donor
fakesplit<- split(fakecombined, donor)
kable(fakesplit$A)
kable(fakesplit$B)
kable(fakesplit$C)
kable(fakesplit$D)
kable(fakesplit$E)
kable(fakesplit$F)
#pred_precipitation[pred_precipitation<0] <- 0
subtractun<-function (datatable) {
#Split datatable by donor
y<- split(datatable, donor)
#Write function that will select numeric columns of datatable
numeric.only <- function(X,...){
returnCols <- names(X)
a<-sapply(X, is.numeric)
print(returnCols[a == "TRUE"])
}
#Apply numeric.only function to datatable
for (z in numeric.only(datatable)){
#Subtract out unstim value from respective stim cytokine values
newcolumn<-unlist(lapply(y,function(g)
(g[,z]- as.matrix(subset(g[,z], g$stim=="un"))[1,1])
))
#Create new datatable with unstim substractions applied to all donors
datatable[,z] <- newcolumn}
datatable
}
#Apply subtractun function to datatable of interest
newfake<-subtractun(fakecombined)
newfake[newfake<0] <- 0
library(knitr)
kable(newfake)
library(ggplot2)
qplot(x=donor, y=ifng, data=newfake, color=stim)
qplot(x=donor, y=tnfa, data=newfake, color=stim)
#for (z in numeric.only(newfake)){
#qplot(x=donor, y=z, data=newfake, color=stim)}
##add line in subtractun for converting negative values to zero
#Apply subtractun function to datatable of interest
newfake<-subtractun(fakecombined)
newfake[newfake<0] <- 0
library(knitr)
kable(newfake)
library(stringr)
donorstringsplit<-str_split_fixed(newfake$donor, "_", 2)
View(donorstringsplit)
View(donorstringsplit)
#Apply subtractun function to datatable of interest
newfake<-subtractun(fakecombined)
newfake[newfake<0] <- 0
library(knitr)
kable(newfake)
before %>%
separate(donor, c("donor", "Status"), "_")
#Apply subtractun function to datatable of interest
newfake<-subtractun(fakecombined)
newfake[newfake<0] <- 0
library(knitr)
kable(newfake)
library(dplyr)
library(tidyr)
newfake %>%
separate(donor, c("donor", "Status"), "_")
#library(stringr)
#donorstringsplit<-str_split_fixed(newfake$donor, "_", 2)
splitmean <- function(df) {
s <- split( df, df$Status)
sapply( s, function(x) mean(x$ifng) )
}
splitmean(newfake)
newfake
#Apply subtractun function to datatable of interest
newfake<-subtractun(fakecombined)
newfake[newfake<0] <- 0
library(knitr)
kable(newfake)
library(dplyr)
library(tidyr)
newnewfake<-newfake %>%
separate(donor, c("donor", "Status"), "_")
#library(stringr)
#donorstringsplit<-str_split_fixed(newfake$donor, "_", 2)
newnewfake
splitmean <- function(df) {
s <- split( df, df$Status)
sapply( s, function(x) mean(x$ifng) )
}
splitmean(newnewfake)
#library(ggplot2)
#qplot(x=donor, y=ifng, data=newfake, color=stim)
#qplot(x=donor, y=tnfa, data=newfake, color=stim)
#for (z in numeric.only(newfake)){
#qplot(x=donor, y=z, data=newfake, color=stim)}
##add line in subtractun for converting negative values to zero
#Apply subtractun function to datatable of interest
newfake<-subtractun(fakecombined)
newfake[newfake<0] <- 0
library(knitr)
kable(newfake)
library(dplyr)
library(tidyr)
newfake<-newfake %>%
separate(donor, c("donor", "Status"), "_")
#library(stringr)
#donorstringsplit<-str_split_fixed(newfake$donor, "_", 2)
head(newfake)
splitmean <- function(df) {
s <- split( df, df$Status)
sapply( s, function(x) mean(x$ifng) )
}
newfake<-splitmean(newfake)
#library(ggplot2)
#qplot(x=donor, y=ifng, data=newfake, color=stim)
#qplot(x=donor, y=tnfa, data=newfake, color=stim)
#for (z in numeric.only(newfake)){
#qplot(x=donor, y=z, data=newfake, color=stim)}
##add line in subtractun for converting negative values to zero
head(newfake)
#splitmean <- function(df) {
#s <- split( df, df$Status)
#sapply( s, function(x) mean(x$ifng) )
#}
#newfake<-splitmean(newfake)
newfake %>%
group_by(Status) %>%
summarise_if(is.numeric, mean)
#splitmean <- function(df) {
#s <- split( df, df$Status)
#sapply( s, function(x) mean(x$ifng) )
#}
#newfake<-splitmean(newfake)
library(dplyr)
library(summarise_if)
#splitmean <- function(df) {
#s <- split( df, df$Status)
#sapply( s, function(x) mean(x$ifng) )
#}
#newfake<-splitmean(newfake)
library(dplyr)
newfake %>%
group_by(Status) %>%
summarise_if(is.numeric, mean)
#splitmean <- function(df) {
#s <- split( df, df$Status)
#sapply( s, function(x) mean(x$ifng) )
#}
#newfake<-splitmean(newfake)
library(dplyr)
newfake<-newfake %>%
group_by(Status) %>%
summarise_if(is.numeric, mean)
#splitmean <- function(df) {
#s <- split( df, df$Status)
#sapply( s, function(x) mean(x$ifng) )
#}
#newfake<-splitmean(newfake)
library(dplyr)
newfake<-newfake %>%
group_by(Status) %>%
summarise_if(is.numeric, mean)
#splitmean <- function(df) {
#s <- split( df, df$Status)
#sapply( s, function(x) mean(x$ifng) )
#}
#newfake<-splitmean(newfake)
library(dplyr)
newfake<-newfake %>%
group_by(Status) %>%
summarise_if(is.numeric, mean)
head(newfake)
#splitmean <- function(df) {
#s <- split( df, df$Status)
#sapply( s, function(x) mean(x$ifng) )
#}
#newfake<-splitmean(newfake)
library(dplyr)
newfake %>%
group_by(Status) %>%
summarise_if(is.numeric, mean)
#splitmean <- function(df) {
#s <- split( df, df$Status)
#sapply( s, function(x) mean(x$ifng) )
#}
#newfake<-splitmean(newfake)
library(dplyr)
newnewfake<-group_by(newfake,Status) %>%
summarise_if(is.numeric, mean)
class(newfake$Status)
#Apply subtractun function to datatable of interest
newfake<-subtractun(fakecombined)
newfake[newfake<0] <- 0
library(knitr)
kable(newfake)
library(dplyr)
library(tidyr)
newfake<-newfake %>%
separate(donor, c("donor", "Status"), "_")
#library(stringr)
#donorstringsplit<-str_split_fixed(newfake$donor, "_", 2)
View(newfake)
View(newfake)
#splitmean <- function(df) {
#s <- split( df, df$Status)
#sapply( s, function(x) mean(x$ifng) )
#}
#newfake<-splitmean(newfake)
library(dplyr)
newnewfake<-group_by(newfake,Status) %>%
summarise_if(is.numeric, mean)
#library(ggplot2)
#qplot(x=donor, y=ifng, data=newfake, color=stim)
#qplot(x=donor, y=tnfa, data=newfake, color=stim)
#for (z in numeric.only(newfake)){
#qplot(x=donor, y=z, data=newfake, color=stim)}
##add line in subtractun for converting negative values to zero
View(newnewfake)
View(newnewfake)
head(newnewfake)
names(newnewfake)
#splitmean <- function(df) {
#s <- split( df, df$Status)
#sapply( s, function(x) mean(x$ifng) )
#}
#newfake<-splitmean(newfake)
library(dplyr)
newnewfake<-group_by(newfake,Status) %>%
summarise_if(is.numeric, mean)
library(plyr)
revalue(newnewfake$nm, c("SMneg"="0", "SMpos"="1"))
# independent 2-group Mann-Whitney U Test where y is numeric and A is A binary factor
#wilcox.test(y~A)
#library(ggplot2)
#qplot(x=donor, y=ifng, data=newfake, color=stim)
#qplot(x=donor, y=tnfa, data=newfake, color=stim)
#for (z in numeric.only(newfake)){
#qplot(x=donor, y=z, data=newfake, color=stim)}
##add line in subtractun for converting negative values to zero
#splitmean <- function(df) {
#s <- split( df, df$Status)
#sapply( s, function(x) mean(x$ifng) )
#}
#newfake<-splitmean(newfake)
library(dplyr)
newnewfakemean<-group_by(newfake,Status) %>%
summarise_if(is.numeric, mean)
library(plyr)
binaryfakemean<-revalue(newnewfakemean$Status, c("SMneg"="0", "SMpos"="1"))
# independent 2-group Mann-Whitney U Test where y is numeric and A is A binary factor
#wilcox.test(y~A)
#library(ggplot2)
#qplot(x=donor, y=ifng, data=newfake, color=stim)
#qplot(x=donor, y=tnfa, data=newfake, color=stim)
#for (z in numeric.only(newfake)){
#qplot(x=donor, y=z, data=newfake, color=stim)}
##add line in subtractun for converting negative values to zero
head(binaryfakemean)
binaryfakemean
newnewfakemean
#splitmean <- function(df) {
#s <- split( df, df$Status)
#sapply( s, function(x) mean(x$ifng) )
#}
#newfake<-splitmean(newfake)
library(dplyr)
newnewfakemean<-group_by(newfake,Status) %>%
summarise_if(is.numeric, mean)
library(plyr)
revalue(newnewfakemean$Status, c("SMneg"="0", "SMpos"="1"))
# independent 2-group Mann-Whitney U Test where y is numeric and A is A binary factor
#wilcox.test(y~A)
#library(ggplot2)
#qplot(x=donor, y=ifng, data=newfake, color=stim)
#qplot(x=donor, y=tnfa, data=newfake, color=stim)
#for (z in numeric.only(newfake)){
#qplot(x=donor, y=z, data=newfake, color=stim)}
##add line in subtractun for converting negative values to zero
newnewfakemean
#splitmean <- function(df) {
#s <- split( df, df$Status)
#sapply( s, function(x) mean(x$ifng) )
#}
#newfake<-splitmean(newfake)
library(dplyr)
newnewfakemean<-group_by(newfake,Status) %>%
summarise_if(is.numeric, mean)
library(plyr)
binaryfakemean<-revalue(newnewfakemean$Status, c("SMneg"="0", "SMpos"="1"))
# independent 2-group Mann-Whitney U Test where y is numeric and A is A binary factor
#wilcox.test(y~A)
#library(ggplot2)
#qplot(x=donor, y=ifng, data=newfake, color=stim)
#qplot(x=donor, y=tnfa, data=newfake, color=stim)
#for (z in numeric.only(newfake)){
#qplot(x=donor, y=z, data=newfake, color=stim)}
##add line in subtractun for converting negative values to zero
binaryfakemean
#splitmean <- function(df) {
#s <- split( df, df$Status)
#sapply( s, function(x) mean(x$ifng) )
#}
#newfake<-splitmean(newfake)
library(dplyr)
newnewfakemean<-group_by(newfake,Status) %>%
summarise_if(is.numeric, mean)
library(plyr)
#binaryfakemean<-revalue(newnewfakemean$Status, c("SMneg"="0", "SMpos"="1"))
newnewfakemean$Status[which(newnewfakemean$Status=="SMneg")]<-"0"
newnewfakemean$Status[which(newnewfakemean$Status=="SMpos")]<-"1"
# independent 2-group Mann-Whitney U Test where y is numeric and A is A binary factor
#wilcox.test(y~A)
#library(ggplot2)
#qplot(x=donor, y=ifng, data=newfake, color=stim)
#qplot(x=donor, y=tnfa, data=newfake, color=stim)
#for (z in numeric.only(newfake)){
#qplot(x=donor, y=z, data=newfake, color=stim)}
##add line in subtractun for converting negative values to zero
newnewfakemean
#splitmean <- function(df) {
#s <- split( df, df$Status)
#sapply( s, function(x) mean(x$ifng) )
#}
#newfake<-splitmean(newfake)
library(dplyr)
newnewfakemean<-group_by(newfake,Status) %>%
summarise_if(is.numeric, mean)
library(plyr)
#binaryfakemean<-revalue(newnewfakemean$Status, c("SMneg"="0", "SMpos"="1"))
newnewfakemean$Status[which(newnewfakemean$Status=="SMneg")]<-"0"
newnewfakemean$Status[which(newnewfakemean$Status=="SMpos")]<-"1"
wilcox.test(newnewfakemean$ifng, newnewfakemean$Status)
newnewfakemean$Status
#splitmean <- function(df) {
#s <- split( df, df$Status)
#sapply( s, function(x) mean(x$ifng) )
#}
#newfake<-splitmean(newfake)
library(dplyr)
newnewfakemean<-group_by(newfake,Status) %>%
summarise_if(is.numeric, mean)
library(plyr)
#binaryfakemean<-revalue(newnewfakemean$Status, c("SMneg"="0", "SMpos"="1"))
newnewfakemean$Status[which(newnewfakemean$Status=="SMneg")]<-"0"
newnewfakemean$Status[which(newnewfakemean$Status=="SMpos")]<-"1"
newnewfakemean$Status <- as.numeric(newnewfakemean$Status)
wilcox.test(newnewfakemean$ifng, newnewfakemean$Status)
# independent 2-group Mann-Whitney U Test where y is numeric and A is A binary factor
#wilcox.test(y~A)
#library(ggplot2)
#qplot(x=donor, y=ifng, data=newfake, color=stim)
#qplot(x=donor, y=tnfa, data=newfake, color=stim)
#for (z in numeric.only(newfake)){
#qplot(x=donor, y=z, data=newfake, color=stim)}
##add line in subtractun for converting negative values to zero
wilcox.test(newnewfakemean$ifng, newnewfakemean$Status)
#splitmean <- function(df) {
#s <- split( df, df$Status)
#sapply( s, function(x) mean(x$ifng) )
#}
#newfake<-splitmean(newfake)
library(dplyr)
newnewfakemean<-group_by(newfake,Status) %>%
summarise_if(is.numeric, mean)
library(plyr)
#binaryfakemean<-revalue(newnewfakemean$Status, c("SMneg"="0", "SMpos"="1"))
newnewfakemean$Status[which(newnewfakemean$Status=="SMneg")]<-"0"
newnewfakemean$Status[which(newnewfakemean$Status=="SMpos")]<-"1"
newnewfakemean$Status <- as.numeric(newnewfakemean$Status)
#wilcox.test(newnewfakemean$ifng, newnewfakemean$Status)
lapply(newnewfakemean, function(x) t.test(x ~ newnewfakemean$Status))
#splitmean <- function(df) {
#s <- split( df, df$Status)
#sapply( s, function(x) mean(x$ifng) )
#}
#newfake<-splitmean(newfake)
library(dplyr)
newnewfakemean<-group_by(newfake,Status) %>%
summarise_if(is.numeric, mean)
library(plyr)
#binaryfakemean<-revalue(newnewfakemean$Status, c("SMneg"="0", "SMpos"="1"))
newnewfakemean$Status[which(newnewfakemean$Status=="SMneg")]<-"0"
newnewfakemean$Status[which(newnewfakemean$Status=="SMpos")]<-"1"
newnewfakemean$Status <- as.numeric(newnewfakemean$Status)
#Write function that will select numeric columns of datatable
numeric.only <- function(X,...){
returnCols <- names(X)
a<-sapply(X, is.numeric)
print(returnCols[a == "TRUE"])
}
#Apply numeric.only function to datatable
for (z in numeric.only(newnewfakemean)){
wilcox.test(z, newnewfakemean$Status)
}
z
numeric.only(newnewfakemean)
with(newfake, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-2.5,2)))
with(newfake, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-2.5,2)))
#splitmean <- function(df) {
#s <- split( df, df$Status)
#sapply( s, function(x) mean(x$ifng) )
#}
#newfake<-splitmean(newfake)
library(dplyr)
newnewfakemean<-group_by(newfake,Status) %>%
summarise_if(is.numeric, mean)
library(plyr)
#binaryfakemean<-revalue(newnewfakemean$Status, c("SMneg"="0", "SMpos"="1"))
newnewfakemean$Status[which(newnewfakemean$Status=="SMneg")]<-"0"
newnewfakemean$Status[which(newnewfakemean$Status=="SMpos")]<-"1"
newnewfakemean$Status <- as.numeric(newnewfakemean$Status)
wilcox.test(newnewfakemean$ifng, newnewfakemean$Status)
#wilcox.test(newnewfakemean$ifng, newnewfakemean$Status)
#lapply(newnewfakemean, function(x) t.test(x ~ newnewfakemean$Status))
#out <- c()
#for(m in columns(Data)) {
#if(class(Data[[m]])=='numeric') {
#out <- c(out, sd(Data[[r]]))
#}
#}
#wilcox.test(nifng, newnewfakemean$Status)
# independent 2-group Mann-Whitney U Test where y is numeric and A is A binary factor
#wilcox.test(y~A)
#library(ggplot2)
#qplot(x=donor, y=ifng, data=newfake, color=stim)
#qplot(x=donor, y=tnfa, data=newfake, color=stim)
#for (z in numeric.only(newfake)){
#qplot(x=donor, y=z, data=newfake, color=stim)}
##add line in subtractun for converting negative values to zero
wilcox.test(newnewfakemean$ifng, newnewfakemean$Status)
